id: '17006766281980.7888214513790028'
kind: workflow
name: makeRevenue
nameConfigured: true
steps:
  - id: '17006799350230.812813906517323'
    type: customAsyncCode
    name: code
    params:
      - type: asyncCode
        value: >-
          const [products, prices, subscriptions] = await Promise.all([
            {{actions.loadProducts.data}} ?? {{actions.loadProducts.trigger()}}, //
            {{actions.loadPrices.data}} ?? {{actions.loadPrices.trigger()}},
            {{actions.loadSubscriptions.data}} ?? {{actions.loadSubscriptions.trigger()}},
          ]);


          const revenues = subscriptions
            .filter(({ status }) => /(active|canceled)/.test(status))
            .map(({ price_id, begin_timestamp, end_timestamp, duration }) => {
              const { price, pricing, pricing_plan, rate, currency, product_id } = prices.find(({ id }) => id === price_id);
              const usdPrice = price / rate;
              const numberOfPayments = Math.ceil(pricing === 'one_time' ? 1 : duration[pricing_plan]);
              const monthDate = end_timestamp.replace(/-\d\d$/, '');
              return {
                revenue: usdPrice * numberOfPayments,
                currency,
                date: monthDate,
                product_id,
              };
            });

          const dates = sortedUniqueDates(revenues.map(({ date }) => date));


          const makeRevenueData = (revenues) => {
            const revenueData = Array(dates.length).fill(0);

            for (let i = 0, subTotal = 0; i < revenues.length; ++i) {
              subTotal += revenues[i].revenue;

              const current = dates.indexOf(revenues[i].date);
              const next = i + 1 < revenues.length ? dates.indexOf(revenues[i + 1].date) + 1 : dates.length;

              revenueData.fill(subTotal, current, next);
            }

            return revenueData;
          };


          const revenueByProductSeries = Object.entries(Object.groupBy(revenues,
          ({ product_id }) => product_id)).map(([product_id, revenues]) => ({
            name: products.find(({ id }) => id === product_id).name,
            type: 'line',
            stack: 'total',
            smooth: false,
            itemStyle: {},
            lineStyle: {},
            areaStyle: {},
            emphasis: {
              focus: 'series',
            },
            data: makeRevenueData(revenues),
          }));


          return {
            revenueByProductSeries,
            xAxies: dates,
          };
        valueType: interpolatedValue
        interpolationType: code
    level: 0
    fallthroughError: false
    isChanged: true
mode: manual
modeConfigured: false
parentPageId: '17006760150270.9093349797971861'
parentId: null
config:
  shouldConfirm: false
  confirmMessage: Are you sure you'd like to proceed with "{{actions.makeRevenue.name}}"?
  showSuccessToast: false
  successToast: Action "{{actions.makeRevenue.name}}" successfully executed
  successToastDuration: '3000'
  successToastHideByClick: false
  showErrorToast: true
  errorToast: Action "{{actions.makeRevenue.name}}" has failed
  errorToastDuration: '3000'
  errorToastHideByClick: false
  delay: '0'
  runWhenFirstReferenced: true
  preserveStateOnPageChange: false
selected: true
configured: true
index: 5
